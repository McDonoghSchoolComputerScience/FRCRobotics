// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4505.Robot18;

import org.usfirst.frc4505.Robot18.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc4505.Robot18.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick controllerOne;
    public Joystick controllerTwo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static final int lsx, lsy, rsx, rsy, lt, rt;
	public static final int h = lsx = 0;
	public static final int a = lsy = 1;
	public static final int b = lt = 2;
	public static final int x = rt = 3;
	public static final int y = rsx = 4;
	public static final int lb = rsy = 5;
	public static final int rb = 6;
	public static final int back = 7;
	public static final int start = 8;
	public static final int ls = 9;
	public static final int rs = 10;
	public JoystickButton A,B,X,Y,LB,RB,START,BACK,LS,RS;
	public ButtonFromAxis LT, RT, LSX, LSY, RSX, RSY;
	public ButtonFromPOV none, U, UR, R, DR, D, DL, L, UL;
    
	//for xbox controller
	public JoystickButton A2,B2,X2,Y2,LB2,RB2,START2,BACK2,LS2,RS2;
	public ButtonFromAxis LT2, RT2, LSX2, LSY2, RSX2, RSY2;
	public ButtonFromPOV none2, U2, UR2, R2, DR2, D2, DL2, L2, UL2;
	
	//for logitech wingman joystick controller
	public JoystickButton trigger, LU,LD,RU,RD,B6,B7;
	public ButtonFromAxis slider, jX, jY, jZ;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        controllerTwo = new Joystick(1);
        
        controllerOne = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("DriveStraight", new DriveStraight());
        SmartDashboard.putData("CubeIn", new CubeIn());
        SmartDashboard.putData("CubeOut", new CubeOut());
        SmartDashboard.putData("ElevatorUp", new ElevatorUp());
        SmartDashboard.putData("SpinIntakeWheels", new SpinIntakeWheels());
        SmartDashboard.putData("ElevatorDown", new ElevatorDown());
        SmartDashboard.putData("Elevate", new Elevate());
        SmartDashboard.putData("ResetSensors", new ResetSensors());
        SmartDashboard.putData("SpinRampsUp", new SpinRampsUp());
        SmartDashboard.putData("AutoLeft", new AutoLeft());
        SmartDashboard.putData("AutoRight", new AutoRight());
        SmartDashboard.putData("SameSideAuto", new SameSideAuto());
        SmartDashboard.putData("BothSidesAuto", new BothSidesAuto());
        SmartDashboard.putData("ElevatorUpToNextLimit", new ElevatorUpToNextLimit());
        SmartDashboard.putData("ElevatorDownToNextLimit", new ElevatorDownToNextLimit());
        SmartDashboard.putData("DeployRamps", new DeployRamps());
        SmartDashboard.putData("SetRampServo", new SetRampServo());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        Y = new JoystickButton(controllerOne, y);
        X = new JoystickButton(controllerOne, x);
        B = new JoystickButton(controllerOne, b);
        A = new JoystickButton(controllerOne, a);
        LB = new JoystickButton(controllerOne, lb);
        RB = new JoystickButton(controllerOne, rb);
        START = new JoystickButton(controllerOne, start);
        BACK = new JoystickButton(controllerOne, back);
        LS = new JoystickButton(controllerOne, ls);
        RS = new JoystickButton(controllerOne, rs);
        RT = new ButtonFromAxis(controllerOne, rt);
        LT = new ButtonFromAxis(controllerOne, lt);
        LSX = new ButtonFromAxis(controllerOne, lsx);
        LSY = new ButtonFromAxis(controllerOne, lsy);
        RSX = new ButtonFromAxis(controllerOne, rsx);
        RSY = new ButtonFromAxis(controllerOne, rsy);
       none = new ButtonFromPOV(controllerOne, -1);
        U = new ButtonFromPOV(controllerOne, 0);
        UR = new ButtonFromPOV(controllerOne, 45);
        R = new ButtonFromPOV(controllerOne, 90);
        DR = new ButtonFromPOV(controllerOne, 135);
        D = new ButtonFromPOV(controllerOne, 180);
        DL = new ButtonFromPOV(controllerOne, 225);
        L = new ButtonFromPOV(controllerOne, 270);
        UL = new ButtonFromPOV(controllerOne, 315);
        
        Y2 = new JoystickButton(controllerTwo, y);
        X2 = new JoystickButton(controllerTwo, x);
        B2 = new JoystickButton(controllerTwo, b);
        A2 = new JoystickButton(controllerTwo, a);
        LB2 = new JoystickButton(controllerTwo, lb);
        RB2 = new JoystickButton(controllerTwo, rb);
        START2 = new JoystickButton(controllerTwo, start);
        BACK2 = new JoystickButton(controllerTwo, back);
        LS2 = new JoystickButton(controllerTwo, ls);
        RS2 = new JoystickButton(controllerTwo, rs);
        RT2 = new ButtonFromAxis(controllerTwo, rt);
        LT2 = new ButtonFromAxis(controllerTwo, lt);
        LSX2 = new ButtonFromAxis(controllerTwo, lsx);
        LSY2 = new ButtonFromAxis(controllerTwo, lsy);
        RSX2 = new ButtonFromAxis(controllerTwo, rsx);
        RSY2 = new ButtonFromAxis(controllerTwo, rsy);
        none2 = new ButtonFromPOV(controllerTwo, -1);
        U2 = new ButtonFromPOV(controllerTwo, 0);
        UR2 = new ButtonFromPOV(controllerTwo, 45);
        R2 = new ButtonFromPOV(controllerTwo, 90);
        DR2 = new ButtonFromPOV(controllerTwo, 135);
        D2 = new ButtonFromPOV(controllerTwo, 180);
        DL2 = new ButtonFromPOV(controllerTwo, 225);
        L2 = new ButtonFromPOV(controllerTwo, 270);
        UL2 = new ButtonFromPOV(controllerTwo, 315);
        
        
        trigger = new JoystickButton(controllerTwo, 1);
        LU = new JoystickButton(controllerTwo, 2);
        LD = new JoystickButton(controllerTwo, 3);
        RU = new JoystickButton(controllerTwo, 4);
        RD = new JoystickButton(controllerTwo, 5);
        B6 = new JoystickButton(controllerTwo, 6);
        B7 = new JoystickButton(controllerTwo, 7);
        jX = new ButtonFromAxis(controllerTwo, 0);
        jY = new ButtonFromAxis(controllerTwo, 1);
        jZ = new ButtonFromAxis(controllerTwo, 2);
        slider = new ButtonFromAxis(controllerTwo, 3);
        
        
        RT.whileHeld(new SpinIntakeWheels());
        
        RS.whileHeld(new DriveStraight());
        
        D.whileHeld(new ElevatorDown());
        U.whileHeld(new ElevatorUp());
        
        START.whileHeld(new ResetSensors());
        
        LT.whileHeld(new SpinRampsUp());
        
        BACK.whileHeld(new DeployRamps());
        
        
        /** IMPLICITLY USED BUTTONS:
         * LB: flip drive direction 
         * RB: flip intake direction
         * RS: drive straight
         */
        if (controllerTwo != null && RobotMap.prefs.getBoolean("twoControllers", true)) {
	        //add controller 2 controls
        	if (RobotMap.prefs.getBoolean("bothXbox", false)) {
        		//xbox controller two
        		
        		//reverse direction with LB/RB
        		
		        RT2.whileHeld(new SpinIntakeWheels());
		        RSY2.whileHeld(new SpinIntakeWheels());
		        
		        
		        D2.whileHeld(new ElevatorDown());
		        U2.whileHeld(new ElevatorUp());
		        
		        LT2.whileHeld(new SpinRampsUp());
		        
		        A2.whenPressed(new ElevatorDownToNextLimit());
		        Y2.whenPressed(new ElevatorUpToNextLimit());
		        
		        LSX2.whileHeld(new SpinRampsUp());
		        
        		BACK2.whileHeld(new DeployRamps());

        	} else {
        		//logitech joystick controller two
        		
        		//reverse direction with B6
        		
        		
        		RU.whileHeld(new ElevatorUp());
        		RD.whileHeld(new ElevatorDown());
        		
        		D2.whenPressed(new ElevatorDownToNextLimit());
		        U2.whenPressed(new ElevatorUpToNextLimit());
        		
        		LU.whileHeld(new CubeOut());
        		LD.whileHeld(new CubeIn());
        		
        		R2.whileHeld(new SpinRampsUp());
        		L2.whileHeld(new SpinRampsUp());
        		
        		trigger.whileHeld(new DeployRamps());
        		
        		
        	}
	        
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getcontrollerOne() {
        return controllerOne;
    }

    public Joystick getcontrollerTwo() {
        return controllerTwo;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public boolean getButton(int button, boolean controllerOne) {
		if (controllerOne) {
			return getcontrollerOne().getRawButton(button);
		} else {
			return getcontrollerTwo().getRawButton(button);
		}
	}
	
	public double getAxis (int axis, boolean controllerOne) {
		if (controllerOne) {
			return getcontrollerOne().getRawAxis(axis);
		} else {
			return getcontrollerTwo().getRawAxis(axis);
		}
	}
	
	
	public boolean getButton(int button) {
		return getcontrollerOne().getRawButton(button);
	}
	
	public double getAxis (int axis) {
		return getcontrollerOne().getRawAxis(axis);
	}
	
	public boolean getButton2(int button) {
		return getcontrollerTwo().getRawButton(button);
	}
	
	public double getAxis2 (int axis) {
		return getcontrollerTwo().getRawAxis(axis);
	}
	
	public int getPOV() {
		//returns -1 if none, returns 0 thru 315 (every 45
		//degrees) if POV is pushed, bearing (starts 0 at up)
	 return getcontrollerOne().getPOV();
	}
	
	public boolean getPOV(int pov) {
		return getPOV()==pov;
	}
	
	public int getPOV2() {
		//returns -1 if none, returns 0 thru 315 (every 45
		//degrees) if POV is pushed, bearing (starts 0 at up)
	 return getcontrollerTwo().getPOV();
	}
	
	public boolean getPOV2(int pov) {
		return getPOV2()==pov;
	}
	
	public class ButtonFromAxis extends JoystickButton {
		public int buttonNumber;
		GenericHID joystick;
		
		public ButtonFromAxis(GenericHID joystick, int buttonNumber) {
			super(joystick, buttonNumber);
			this.buttonNumber = buttonNumber;
			this.joystick = joystick;
		}
	
		public boolean get() {
			return Math.abs(joystick.getRawAxis(buttonNumber)) > 0.2;
		}
	}
	
	public class ButtonFromPOV extends JoystickButton {
		public int pov;
		GenericHID joystick;
		
		public ButtonFromPOV(GenericHID joystick, int pov) {
			super(joystick, 0);
			this.pov = pov;
			this.joystick = joystick;
		}
	
		public boolean get() {
			return joystick.getPOV()==pov;
		}
	}
}

