// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4505.Robot18.subsystems;

import org.usfirst.frc4505.Robot18.RobotMap;
import org.usfirst.frc4505.Robot18.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController elevator1 = RobotMap.elevatorelevator1;
    private final DigitalInput limitLow = RobotMap.elevatorlimitLow;
    private final DigitalInput limitHigh = RobotMap.elevatorlimitHigh;
    private final DigitalInput limitMid = RobotMap.elevatorlimitMid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public int state = 1;//1=down, 2=btw down & switch, 3=switch, 4=btw switch & up, 5=up
    public final DigitalInput[] limits = {limitLow, limitMid, limitHigh};
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	putDataOnDash();
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    
    public void putDataOnDash() {
    	SmartDashboard.putBoolean("ElevatorLow", isElevatorDown());
    	SmartDashboard.putBoolean("ElevatorMid", isElevatorMiddle());
    	SmartDashboard.putBoolean("ElevatorHigh", isElevatorUp());
    }
    
    public void set(double pow) {
    	elevator1.set(pow);
    }
    
    public void stop() {
    	set(0);
    }
    
    public boolean isElevatorUp() {
    	return limitHigh.get();
    }
    
    public boolean isElevatorMiddle() {
    	return limitMid.get();
    }
    
    public boolean isElevatorDown() {
    	return limitLow.get();
    }
    
    public void updateElevatorConstants() {
    	RobotMap.elDownSpd = RobotMap.prefs.getDouble("elDownSpd", RobotMap.elDownSpd);
    	RobotMap.elUpSpd = RobotMap.prefs.getDouble("elUpSpd", RobotMap.elUpSpd);
    	updateSafeguard();
    }
    
    public void updateSafeguard() {
    	RobotMap.safeguard = RobotMap.prefs.getBoolean("safeguard", RobotMap.safeguard);
    }
}

