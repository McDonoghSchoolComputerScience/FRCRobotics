// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4505.Robot18.subsystems;

import org.usfirst.frc4505.Robot18.RobotMap;
import org.usfirst.frc4505.Robot18.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Ramps extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController rampL1 = RobotMap.rampsrampL1;
    private final SpeedController rampL2 = RobotMap.rampsrampL2;
    private final SpeedControllerGroup rampL = RobotMap.rampsrampL;
    private final SpeedController rampR1 = RobotMap.rampsrampR1;
    private final SpeedController rampR2 = RobotMap.rampsrampR2;
    private final SpeedControllerGroup rampR = RobotMap.rampsrampR;
    private final DigitalInput leftLimit = RobotMap.rampsleftLimit;
    private final DigitalInput rightLimit = RobotMap.rampsrightLimit;
    private final Servo rampServo = RobotMap.rampsrampServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	putDataOnDash();
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    
    public void putDataOnDash() {
    	SmartDashboard.putBoolean("leftRampUp", isLeftUp());
    	SmartDashboard.putBoolean("rightRampUp", isRightUp());
    }
    
    
    public void setLeft(double pow, boolean flip) {
    	setLeft((flip) ? -pow : ((RobotMap.safeguard && isLeftUp()) ? 0 : pow));
    }
    
    public void setLeft(double pow) {
    	rampL.set(pow);
    }
    
    public void setRight(double pow, boolean flip) {
    	setRight((flip) ? -pow : ((RobotMap.safeguard && isRightUp()) ? 0 : pow));
    }
    
    public void setRight(double pow) {
    	rampR.set(pow);
    }
    
    public void set(double pow, boolean flip) {
    	set((flip) ? -pow : pow);
    }
    
    public void set(double pow) {
    	setRight(pow);
    	setLeft(pow);
    }
    
    public void stop() {
    	set(0);
    }
    
    public Servo getSetvo() {
    	return rampServo;
    }
    
    public double getServoAngle() {
    	return rampServo.get();
    }
    
    public void setServo(double ang) {
    	rampServo.set(ang);
    }
    
    
    
    public boolean isRightUp() {
    	return rightLimit.get();
    }
    
    public boolean isLeftUp() {
    	return leftLimit.get();
    }
    
    
    public void updateSafeguard() {
    	RobotMap.safeguard = RobotMap.prefs.getBoolean("safeguard", RobotMap.safeguard);
    }
}

