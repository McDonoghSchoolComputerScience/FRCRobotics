// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4505.Robot18;

import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.*;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX drivetrainLB;
    public static WPI_TalonSRX drivetrainLS;
    public static SpeedControllerGroup drivetrainleft;
    public static WPI_TalonSRX drivetrainRB;
    public static WPI_TalonSRX drivetrainRS;
    public static SpeedControllerGroup drivetrainright;
    public static DifferentialDrive drivetraindrivetrain;
    public static SpeedController intakeWheelsleftIn;
    public static SpeedController intakeWheelsrightIn;
    public static SpeedController elevatorelevator1;
    public static DigitalInput elevatorlimitLow;
    public static DigitalInput elevatorlimitHigh;
    public static DigitalInput elevatorlimitMid;
    public static SpeedController rampsrampL1;
    public static SpeedController rampsrampL2;
    public static SpeedControllerGroup rampsrampL;
    public static SpeedController rampsrampR1;
    public static SpeedController rampsrampR2;
    public static SpeedControllerGroup rampsrampR;
    public static DigitalInput rampsleftLimit;
    public static DigitalInput rampsrightLimit;
    public static Servo rampsrampServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static ADXRS450_Gyro gyro;
    public static I2C i2c;
    public static double tStart;
    public static double lastTime;
    public static double robotLen;
    public static byte[] toSend, readIn;

    public static Preferences prefs;
    
    public static double elUpSpd, elDownSpd;
    public static double intakeSpd;
    public static boolean isBlue;
    public static double autoSpd;
    public static boolean safeguard;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLB = new WPI_TalonSRX(3);
        
        
        drivetrainLS = new WPI_TalonSRX(4);
        
        
        drivetrainleft = new SpeedControllerGroup(drivetrainLB, drivetrainLS  );
        LiveWindow.addActuator("Drivetrain", "left", drivetrainleft);
        
        drivetrainRB = new WPI_TalonSRX(1);
        
        
        drivetrainRS = new WPI_TalonSRX(2);
        
        
        drivetrainright = new SpeedControllerGroup(drivetrainRB, drivetrainRS  );
        LiveWindow.addActuator("Drivetrain", "right", drivetrainright);
        
        drivetraindrivetrain = new DifferentialDrive(drivetrainleft, drivetrainright);
        LiveWindow.addActuator("Drivetrain", "drivetrain", drivetraindrivetrain);
        drivetraindrivetrain.setSafetyEnabled(true);
        drivetraindrivetrain.setExpiration(0.1);
        drivetraindrivetrain.setMaxOutput(1.0);

        intakeWheelsleftIn = new Spark(0);
        LiveWindow.addActuator("IntakeWheels", "leftIn", (Spark) intakeWheelsleftIn);
        intakeWheelsleftIn.setInverted(false);
        intakeWheelsrightIn = new Spark(1);
        LiveWindow.addActuator("IntakeWheels", "rightIn", (Spark) intakeWheelsrightIn);
        intakeWheelsrightIn.setInverted(false);
        elevatorelevator1 = new Spark(2);
        LiveWindow.addActuator("Elevator", "elevator1", (Spark) elevatorelevator1);
        elevatorelevator1.setInverted(true);
        elevatorlimitLow = new DigitalInput(0);
        LiveWindow.addSensor("Elevator", "limitLow", elevatorlimitLow);
        
        elevatorlimitHigh = new DigitalInput(1);
        LiveWindow.addSensor("Elevator", "limitHigh", elevatorlimitHigh);
        
        elevatorlimitMid = new DigitalInput(2);
        LiveWindow.addSensor("Elevator", "limitMid", elevatorlimitMid);
        
        rampsrampL1 = new Talon(3);
        LiveWindow.addActuator("Ramps", "rampL1", (Talon) rampsrampL1);
        rampsrampL1.setInverted(false);
        rampsrampL2 = new Talon(5);
        LiveWindow.addActuator("Ramps", "rampL2", (Talon) rampsrampL2);
        rampsrampL2.setInverted(false);
        rampsrampL = new SpeedControllerGroup(rampsrampL1, rampsrampL2  );
        LiveWindow.addActuator("Ramps", "rampL", rampsrampL);
        
        rampsrampR1 = new Talon(4);
        LiveWindow.addActuator("Ramps", "rampR1", (Talon) rampsrampR1);
        rampsrampR1.setInverted(false);
        rampsrampR2 = new Talon(6);
        LiveWindow.addActuator("Ramps", "rampR2", (Talon) rampsrampR2);
        rampsrampR2.setInverted(false);
        rampsrampR = new SpeedControllerGroup(rampsrampR1, rampsrampR2  );
        LiveWindow.addActuator("Ramps", "rampR", rampsrampR);
        
        rampsleftLimit = new DigitalInput(3);
        LiveWindow.addSensor("Ramps", "leftLimit", rampsleftLimit);
        
        rampsrightLimit = new DigitalInput(4);
        LiveWindow.addSensor("Ramps", "rightLimit", rampsrightLimit);
        
        rampsrampServo = new Servo(7);
        LiveWindow.addActuator("Ramps", "rampServo", rampsrampServo);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        gyro = new ADXRS450_Gyro();
        LiveWindow.addSensor("Drivetrain", "gyro", gyro);
        
        CameraServer.getInstance().startAutomaticCapture();
        
        
        drivetrainLB.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        drivetrainLB.setSensorPhase(true);
        drivetrainRB.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        drivetrainRB.setSensorPhase(false);
        
//        LiveWindow.addActuator("Drivetrain", "drivetrainLB", drivetrainLB);
//        LiveWindow.addActuator("Drivetrain", "drivetrainLS", drivetrainLS);
//        LiveWindow.addActuator("Drivetrain", "drivetrainRB", drivetrainRB);
//        LiveWindow.addActuator("Drivetrain", "drivetrainRS", drivetrainRS);
        
        i2c = new I2C(I2C.Port.kMXP, 84);
        tStart = Timer.getFPGATimestamp();
        lastTime = tStart;
        toSend = new byte[1];
        readIn = new byte[1];
        
        
        rampsrampServo.set(0.0);

        prefs = Preferences.getInstance();
        
        elUpSpd = prefs.getDouble("elUpSpd", 1.0);
        elDownSpd = prefs.getDouble("elDownSpd", -1.0);
        
        intakeSpd = prefs.getDouble("intakeSpd", 0.5);
        
        isBlue = prefs.getBoolean("isBlue", true);
        
        autoSpd = prefs.getDouble("autoSpd", 0.6);
        
        safeguard = prefs.getBoolean("safeguard", true);
        
        robotLen = 33.0 + 7.0 + 2.0;//len + bumpers + 2 in buffer
    }
}
